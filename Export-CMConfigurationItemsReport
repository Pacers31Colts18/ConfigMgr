function Export-CMConfigurationItemsReport {
<#
.SYNOPSIS
    Exports Configuration Manager configuration items to a CSV file.

.DESCRIPTION
    This function retrieves Configuration Manager (SCCM) configuration items and exports them to a CSV file.
    It gathers data on last modified date, policy name, compliance settings, rule types, and associated baselines.

.PARAMETER PolicyName
    Specifies the name(s) of the Configuration Items (CI) to export.
    - If provided, the function returns details only for the specified CI(s).
    - If omitted, the function retrieves configuration items based on the Scope parameter or allows interactive selection.

.PARAMETER Scope
    Defines the scope of configuration items to be exported:
    - `"All"`: Returns all configuration items.
    - `"Assigned"`: Returns only assigned configuration items.
    - `"Unassigned"`: Returns only unassigned configuration items.
    - If omitted, defaults to interactive selection via `Out-GridView`.

.EXAMPLE
    Export-CMConfigurationItemsReport -PolicyName "Example CI"
    Retrieves details for the specified Configuration Item and exports them.

.EXAMPLE
    Export-CMConfigurationItemsReport -Scope "All"
    Retrieves details for all configuration items and exports them.

.EXAMPLE
    Export-CMConfigurationItemsReport -Scope "Assigned"
    Retrieves only assigned configuration items and exports them.

.EXAMPLE
    Export-CMConfigurationItemsReport -Scope "Unassigned"
    Retrieves only unassigned configuration items and exports them.

.NOTES
    - Requires SCCM PowerShell module access.
    - If `PolicyName` and `Scope` are both omitted, the function prompts for selection via `Out-GridView`.
    - The exported CSV file is stored in the working directory with a timestamped filename.
#>

    
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $False)]
        [array]$PolicyName,
        [Parameter(Mandatory = $False)]
        [ValidateSet("All", "Assigned", "Unassigned")]$Scope
    )
    
    $StartingLocation = $pwd
    Connect-CMSite
    
    #region Declarations
    $FunctionName = $MyInvocation.MyCommand.Name.ToString()
    $date = Get-Date -Format yyyyMMdd-HHmm
    if ($outputdir.Length -eq 0) { $outputdir = $pwd }
    $OutputFilePath = "$OutputDir\$FunctionName-$date.csv"
    $LogFilePath = "$OutputDir\$FunctionName-$date.log"
    $ResultsArray = @()
    #endregion
    
    #region Parameter Logic
    if ($PolicyName.Count -gt 0 -and $Scope -eq "All") {
        Write-Error "Error: PolicyName and All cannot be used at the same time."
        Break
    }

    if ($null -eq $PolicyName -and $null -eq $Scope) {
        $PolicyName = (Get-CMConfigurationItem -name * -fast | Select-Object DateLastModified, InUse, LocalizedDescription, LocalizedDisplayName, ObjectPath | Out-GridView -PassThru).LocalizedDisplayName
    }
    elseif ($null -ne $Scope) {

        if ($null -eq $PolicyName) {
            $AllConfigItems = Get-CMConfigurationItem -Name * -Fast

            switch ($Scope) {
                "All" { $PolicyName = $AllConfigItems.LocalizedDisplayName }
                "Unassigned" { $PolicyName = $AllConfigItems | Where-Object { -not $_.InUse } | Select-Object -ExpandProperty LocalizedDisplayName }
                "Assigned" { $PolicyName = $AllConfigItems | Where-Object { $_.InUse } | Select-Object -ExpandProperty LocalizedDisplayName }
            }
            Write-Output -message "Gathering configuration items based on scope: $Scope"
        }
    }
    Write-Output -message "Configuration items found: $($PolicyName.Count)"
    #endregion

    
    foreach ($policy in $PolicyName) {
        $associatedBaselineNames = @()

        # Get policy details
        $policyDetails = Get-CMConfigurationItem -Name $policy -WarningAction Ignore
    
        if ($policyDetails.InUse) {
            $lastIndex = $policyDetails.CI_UniqueID.LastIndexOf("_") + 1  
            $length = $policyDetails.CI_UniqueID.Length - $lastIndex - 2
            $CIUniqueID = $policyDetails.CI_UniqueID.Substring($lastIndex, $length)
    
            $AllBaselines = Get-CMBaseline -Fast
    
            foreach ($baseline in $AllBaselines) {
                $baselineName = $baseline.LocalizedDisplayName
                $XMLContent = $baseline | Get-CMBaselineXMLDefinition
    
                if ($XMLContent -match $CIUniqueID) {
                    $associatedBaselineNames += $baselineName
                }
            }
            Write-Output "Configuration Item: $($policyDetails.localizeddisplayName) found $($associatedBaselineNames.count) associated baselines"
        }
        if (!$policyDetails.InUse) {
            Write-Warning "Configuration Item: $($policydetails.localizedDisplayName) is not in use"
        }
    
        # Retrieve Compliance Settings and Rules
        $policyRules = Get-CMComplianceRule -Name $policyDetails.LocalizedDisplayName -WarningAction Ignore
        $policySettings = Get-CMComplianceSetting -Name $policyDetails.LocalizedDisplayName -WarningAction Ignore | Select-Object -Unique
    
        foreach ($rule in $policyRules) {
            foreach ($setting in $policySettings) {
    
                # Determine Setting Type
                $settingdatatypeName = switch ($setting.settingdataType.Name) {
                    "Int64" { "DWORD" }
                    "String" { "STRING" }
                    "StringArray" { "MULTI_STRING" }
                    default { $setting.settingdataType.Name }
                }
    
                # Determine Rule Type & Value
                $ruleType = if ($rule.expression.operands | Where-Object { $_.methodType -eq "Count" }) { "Existential" } else { $rule.expression.operands.methodType }
                $ruleValue = if ($ruleType -eq "Existential") {
                    switch ($rule.expression.operands.Value) {
                        "0" { "Registry value must exist on client devices" }
                        "1" { "Registry value must not exist on client devices" }
                        default { $rule.expression.operands.Value }
                    }
                }
                else {
                    $rule.expression.operands.Value
                }
    
                $result = New-Object -TypeName PSObject -Property @{
                    LastModified       = $policyDetails.DateLastModified
                    PolicyName         = $policyDetails.LocalizedDisplayName
                    RuleName           = $rule.Name
                    SettingRemediation = $setting.SupportsRemediation
                    RuleType           = $ruleType
                    RuleValue          = $ruleValue
                    SettingType        = $setting.SourceType
                    SettingDataType    = $settingdatatypeName
                    SettingPath        = $setting.Location
                    SettingName        = if ($setting.ValueName) { $setting.ValueName } else { $setting.Name }
                    BaselineName       = $associatedBaselineNames -join "; "
                }
                $ResultsArray += $result
            }
        }
    }
    
    #region Export Results
    if ($ResultsArray.Count -ge 1) {
        $ResultsArray | Sort-Object BaselineName | Export-Csv -Path $OutputFilePath -NoTypeInformation
        Write-Output "Results found. Results file=$OutputFilePath."
    }
    else {
        Write-Warning "No results found."
    }
    
    Set-Location $StartingLocation
    #endregion
}
    
