function Export-CMConfigurationItemsReport {
<#
.SYNOPSIS
    Exports Configuration Manager configuration items to a CSV file.

.DESCRIPTION
    This function retrieves Configuration Manager (SCCM) configuration items and exports them to a CSV file.
    It gathers data on last modified date, policy name, compliance settings, rule types, and assigned baselines.

.PARAMETER PolicyName
    Specifies the name(s) of the Configuration Items (CI) to export.
    - If provided, the function will return details only for the specified CI(s).
    - If omitted, it will retrieve all configuration items based on the Scope parameter.

.PARAMETER Scope
    Defines the scope of configuration items to be exported:
    - `"All"`: Returns all configuration items.
    - `"Assigned"`: Returns only assigned configuration items.
    - `"Unassigned"`: Returns only unassigned configuration items.
    - If omitted, will default to All.

.EXAMPLE
    Export-CMConfigurationItemsReport -PolicyName "CI Name"
    Retrieves details for the specified Configuration Item and exports them.

.EXAMPLE
    Export-CMConfigurationItemsReport -Scope "All"
    Retrieves details for all configuration items and exports them.

.EXAMPLE
    Export-CMConfigurationItemsReport -Scope "Assigned"
    Retrieves only assigned configuration items and exports them.

.EXAMPLE
    Export-CMConfigurationItemsReport -Scope "Unassigned"
    Retrieves only unassigned configuration items and exports them.

.NOTES
    - This function interacts with SCCM using PowerShell cmdlets to extract information.
    - The output is stored as a CSV file in the working directory with a timestamped filename.
    - Requires SCCM PowerShell module access to execute successfully.

#>

    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $False)]
        [array]$PolicyName,
        [Parameter(Mandatory = $False)]
        [ValidateSet("All", "Assigned", "Unassigned")]$Scope = "All"
    )

    $StartingLocation = $pwd

    #Connect to CM Site
    Connect-CMSite

    #region Declarations
    $FunctionName = $MyInvocation.MyCommand.Name.ToString()
    $date = Get-Date -Format yyyyMMdd-HHmm
    if ($outputdir.Length -eq 0) { $outputdir = $pwd }
    $OutputFilePath = "$OutputDir\$FunctionName-$date.csv"
    $LogFilePath = "$OutputDir\$FunctionName-$date.log"
    $ResultsArray = @()
    #endregion

    #region Parameter Logic
    if ($PolicyName.Count -gt 0 -and $Scope) {
        Write-Error "Error: PolicyName and All can not be used at the same time."
        Break
    }

    if ($null -eq $PolicyName -and $null -eq $Scope) {
        # BaselineName not given, Scope not used.
        $PolicyName = (Get-CMConfigurationItem -name * -fast | Select-Object DateLastModified, InUse, LocalizedDescription, LocalizedDisplayName, ObjectPath | Out-GridView -PassThru).LocalizedDisplayName
    }
    elseif ($null -ne $Scope) {
        # Scope specified
        switch ($Scope) {
            "All" {
                $PolicyName = (Get-CMConfigurationItem -name * -fast).LocalizedDisplayName
                $policycount = $PolicyName.count
                Write-Output "Gathering All configuration items"
                Write-Output "Configuration items found: $policycount"
            }
            "Unassigned" {
                $PolicyName = (Get-CMConfigurationItem -name * -fast | Where-Object { -not $_.InUse }).LocalizedDisplayName
                $policycount = $PolicyName.count
                Write-Output "Gathering unassigned configuration items"
                Write-Output "Configuration items found: $policycount"

            }
            "Assigned" {
                $PolicyName = (Get-CMConfigurationItem -name * -fast | Where-Object { $_.InUse }).LocalizedDisplayName
                $policycount = $PolicyName.count
                Write-Output "Gathering assigned configuration items"
                Write-Output "Configuration Items found: $policycount"
            }
        }
    }

    if ($policyName) {
        $PolicyName = $PolicyName.Trim('"')
    }
    foreach ($policy in $policyName) {
        $associatedBaselineNames = @()

        # Get policy details
        $policyDetails = Get-CMConfigurationItem -Name $policy -WarningAction Ignore

        if ($policyDetails.InUse) {
            $lastIndex = $policyDetails.CI_UniqueID.LastIndexOf("_") + 1  
            $length = $policyDetails.CI_UniqueID.Length - $lastIndex - 2
            $CIUniqueID = $policyDetails.CI_UniqueID.Substring($lastIndex, $length)

            $AllBaselines = Get-CMBaseline -Fast

            foreach ($baseline in $AllBaselines) {
                $baselineName = $baseline.LocalizedDisplayName
                $XMLContent = $baseline | Get-CMBaselineXMLDefinition

                if ($XMLContent -match $CIUniqueID) {
                    $associatedBaselineNames += $baselineName
                }
            }
            Write-Output "Configuration Item: $($policyDetails.localizeddisplayName) found $($associatedBaselineNames.count) associated baselines"
        }
        if (!$policyDetails.InUse) {
            Write-Output "Configuration Item: $($policydetails.localizedDisplayName) is not in use" -level warning
        }

        foreach ($name in $policyDetails.LocalizedDisplayName) {
            $policyRules = Get-CMComplianceRule -Name $name -WarningAction Ignore
            $policySettings = Get-CMComplianceSetting -Name $name -WarningAction Ignore | Select-Object -Unique

            foreach ($rule in $policyRules) {

                foreach ($setting in $policySettings) {
                    # Determine registry data type
                    switch ($setting.settingdataType.Name) {
                        "Int64" { $settingdatatypeName = "DWORD" }
                        "String" { $settingdatatypeName = "STRING" }
                        "String" { $settingdatatypeName = "DATE AND TIME" }
                        "Version" { $settingdatatypeName = "VERSION" }
                        "StringArray" { $settingdatatypeName = "MULTI_STRING" }
                        default { $settingdatatypeName = $setting.settingdataType.Name }
                    }

                    # Determine rule type
                    $ruleType = if ($rule.expression.operands.methodType -eq "Count") { "Existenal" } else { $rule.expression.operands.methodType }

                    if ($ruleType -eq "Existenal") {
                        $ruleValue = switch ($rule.expression.operands.Value) {
                            "0" { "Registry value must exist on client devices" }
                            "1" { "Registry value must not exist on client devices" }
                            default { $rule.expression.operands.Value }
                        }
                    }
                    else {
                        $ruleValue = $rule.expression.operands.Value
                    }

                    $result = New-Object -TypeName PSObject -Property @{
                        LastModified       = $policyDetails.DateLastModified
                        PolicyName         = $policyDetails.LocalizedDisplayName
                        RuleName           = $rule.Name
                        SettingRemediation = $setting.SupportsRemediation
                        RuleType           = $ruleType
                        RuleValue          = $ruleValue
                        SettingType        = $setting.SourceType
                        SettingDataType    = $settingdatatypeName
                        SettingPath        = $setting.Location
                        SettingName        = if ($setting.ValueName) { $setting.ValueName } else { $setting.Name }
                        BaselineName       = $associatedbaselineNames -join "; "
                    }
                    $ResultsArray += $result
                }
            }
        }
    }

    #region Results
    if ($resultsArray.count -ge 1) {
        $ResultsArray | Select-Object LastModified, PolicyName, SettingRemediation, SettingType, SettingDataType, SettingPath, SettingName, RuleName, RuleType, RuleValue, BaselineName | Sort-Object -Property BaselineName | Export-Csv -Path $outputfilepath -NoTypeInformation
    }
    #Test if results file was created
    If (Test-Path $outputfilepath) {
        Write-Output "Results found. Results file=$outputfilepath."
    }
    else {
        Write-Warning "No results found."
    }
    #endregion
    Set-Location $startingLocation
}
